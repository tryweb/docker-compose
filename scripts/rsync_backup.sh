#!/bin/bash
export LANG=en_US.utf8

# --- .env Ê™îÊ°àËºâÂÖ• ---
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
if [ -f "$SCRIPT_DIR/.env" ]; then
    set -a
    source "$SCRIPT_DIR/.env"
    set +a
fi

# --- ÂëΩ‰ª§ÂàóÂèÉÊï∏Ëß£Êûê ---
DRY_RUN=false
CLI_EXCLUDE_PATTERNS=()
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--source) CLI_SOURCE_DIR="$2"; shift ;;
        -d|--dest-root) CLI_DEST_ROOT="$2"; shift ;;
        -e|--exceptions) CLI_EXCEPTIONS_FILE="$2"; shift ;;
        -l|--log-dir) CLI_LOG_DIR="$2"; shift ;;
        -n|--name) CLI_NAME="$2"; shift ;;
        -f|--exclude-file) CLI_EXCLUDE_FILE="$2"; shift ;;
        -x|--exclude) CLI_EXCLUDE_PATTERNS+=("$2"); shift ;;
        -b|--bwlimit) CLI_BW_LIMIT="$2"; shift ;;
        -r|--retention-days) CLI_RETENTION_DAYS="$2"; shift ;;
        --discord-webhook) CLI_DISCORD_WEBHOOK="$2"; shift ;;
        --discord-script) CLI_DISCORD_SCRIPT="$2"; shift ;;
        --ai-script) CLI_AI_SCRIPT="$2"; shift ;;
        --grep-exclude) CLI_GREP_EXCLUDE="$2"; shift ;;
        --send-discord) CLI_SEND_DISCORD=true ;;
        --summarize) CLI_SUMMARIZE=true ;;
        --dry-run|-n) DRY_RUN=true ;; # -n ÊòØ rsync ÁöÑ dry-run, Ê≠§ËôïÊ≤øÁî®
        *) echo "Êú™Áü•ÂèÉÊï∏: $1" >>/dev/stderr; exit 1 ;;
    esac
    shift
done

# --- Ë®≠ÂÆöÊúÄÁµÇËÆäÊï∏ÂÄº (ÂÑ™ÂÖàÁ¥ö: CLI > .env > Á°¨Á∑®Á¢ºÈ†êË®≠ÂÄº) ---
SOURCE_DIR="${CLI_SOURCE_DIR:-$SOURCE_DIR}"
DEST_ROOT="${CLI_DEST_ROOT:-${DEST_ROOT:-/volumeUSB1/usbshare1-2/TP-Data-Server}}"
EXCEPTIONS_FILE="${CLI_EXCEPTIONS_FILE:-$EXCEPTIONS_FILE}"
LOG_DIR_BASE="${CLI_LOG_DIR:-${LOG_DIR:-/volume1/homes/tprsynclog}}"
SCRIPT_NAME="${CLI_NAME:-${NAME:-rsync_backup}}"
EXCLUDE_FILE="${CLI_EXCLUDE_FILE:-${EXCLUDE_FILE:-/volume1/homes/nonecopy}}"
BW_LIMIT="${CLI_BW_LIMIT:-${BW_LIMIT:-10000}}"
RETENTION_DAYS="${CLI_RETENTION_DAYS:-${RETENTION_DAYS:-7}}"
SEND_DISCORD="${CLI_SEND_DISCORD:-${SEND_DISCORD:-true}}"
DISCORD_SCRIPT="${CLI_DISCORD_SCRIPT:-${DISCORD_SCRIPT:-/volume1/homes/send_logs_to_discord.sh}}"
DISCORD_WEBHOOK="${CLI_DISCORD_WEBHOOK:-$DISCORD_WEBHOOK}"
SUMMARIZE="${CLI_SUMMARIZE:-${SUMMARIZE:-false}}"
AI_SCRIPT="${CLI_AI_SCRIPT:-${AI_SCRIPT:-/home/jonathan/github/docker-compose/scripts/ai_proc_log.sh}}"
GREP_EXCLUDE_PATTERN="${CLI_GREP_EXCLUDE:-${GREP_EXCLUDE_PATTERN:-"sending incremental file list"}}"
EXCLUDE_PATTERNS=()
if [ ${#CLI_EXCLUDE_PATTERNS[@]} -gt 0 ]; then
    EXCLUDE_PATTERNS=("${CLI_EXCLUDE_PATTERNS[@]}")
elif [ -n "$RSYNC_EXCLUDE_PATTERNS" ]; then
    read -r -a EXCLUDE_PATTERNS <<< "$RSYNC_EXCLUDE_PATTERNS"
fi

# --- ÂøÖË¶ÅÂèÉÊï∏Ê™¢Êü• ---
if [ -z "$SOURCE_DIR" ]; then
    echo "ÈåØË™§ÔºöÂøÖÈ†àÈÄèÈÅé --source Êàñ .env Êèê‰æõ‰æÜÊ∫êÁõÆÈåÑ (SOURCE_DIR)" >>/dev/stderr
    exit 1
fi
if [ ! -d "$SOURCE_DIR" ]; then
    echo "ÈåØË™§Ôºö‰æÜÊ∫êÁõÆÈåÑ $SOURCE_DIR ‰∏çÂ≠òÂú®Êàñ‰∏çÊòØÁõÆÈåÑ" >>/dev/stderr
    exit 1
fi

# --- Áí∞Â¢ÉËÆäÊï∏Ë®≠ÂÆö ---
SRC_BASENAME=$(basename "$SOURCE_DIR")
NORMALIZED_SOURCE_DIR="${SOURCE_DIR%/}"
LOG_DIR="${LOG_DIR_BASE}/${SRC_BASENAME}"
[ ! -d "$LOG_DIR" ] && mkdir -p "$LOG_DIR"
DATE_TITLE=$(date +%F)
DATE_TODAY=$(date +%F-%H%M%S)
LOG_FILE="${LOG_DIR}/${SCRIPT_NAME}_${SRC_BASENAME}_${DATE_TODAY}.log"
LOCK_FILE="/tmp/${SCRIPT_NAME}_$(echo -n "$SOURCE_DIR" | md5sum | awk '{print $1}').lock"

# --- ÂáΩÂºèÂÆöÁæ© ---

# „Äê‰øÆÊîπ„ÄëÂáΩÂºèÔºöÁôºÈÄÅÁ∞°ÂñÆÁöÑÈåØË™§ÈÄöÁü•ÔºåÁî®ÊñºÈéñÂÆöÂ§±ÊïóÁ≠âÊÉÖÊ≥Å
send_simple_discord_error() {
    local error_message="$1"
    local error_title="üö® Backup Script Alert: ${SRC_BASENAME}"
    
    # Áõ¥Êé•Âª∫Á´ã‰∏ÄÂÄãËá®ÊôÇÊñá‰ª∂‰æÜÂÇ≥ÈÅûÁ∞°ÂñÆÁöÑÈåØË™§Ë®äÊÅØ
    local tmp_err_file="${LOG_FILE}.err_msg"
    echo "$error_message" > "$tmp_err_file"

    "$DISCORD_SCRIPT" \
    "LOG_FILE=${tmp_err_file}" \
    "WEBHOOK_URL=${DISCORD_WEBHOOK}" \
    "TITLE=${error_title}" \
    "MSGTYPE=ERR"
    
    rm "$tmp_err_file"
}

# „Äê‰øÆÊîπ„ÄëÂáΩÂºèÔºöÁç≤ÂèñÈéñ
acquire_lock() {
    exec 200>"$LOCK_FILE"
    if ! flock -n 200; then
        local log_msg="$(date '+%Y-%m-%d %H:%M:%S') - $SCRIPT_NAME ($SOURCE_DIR) Â∑≤Âú®Âü∑Ë°å‰∏≠ÔºåÈÄÄÂá∫"
        echo "$log_msg" >>"$LOG_FILE"
        if [ "$SEND_DISCORD" = true ]; then
            # ‰ΩøÁî®Êñ∞ÁöÑÈåØË™§ÈÄöÁü•ÂáΩÂºèÔºåÁôºÈÄÅÂ∏∂ÊúâÈ°èËâ≤ÁöÑÈÄöÁü•
            send_simple_discord_error "$SCRIPT_NAME for $SOURCE_DIR is already running. This backup was skipped."
        fi
        exit 1
    fi
    echo $$ >&200
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Áç≤ÂæóÈéñÂÆö (PID: $$, SOURCE: $SOURCE_DIR)" >>"$LOG_FILE"
}

# „Äê‰øÆÊîπ„ÄëÂáΩÂºèÔºöÁôºÈÄÅ Discord ÈÄöÁü•ÔºàËàá‰∏ä‰∏ÄÁâàÂõûÁ≠îÁõ∏ÂêåÔºâ
send_discord_notification() {
    local status="$1"
    local msg_type=""
    case "$status" in
        OK) msg_type="OK" ;;
        ERR) msg_type="ERR" ;;
    esac

    if ! [ "$SEND_DISCORD" = true ] || [ -z "$DISCORD_WEBHOOK" ] || [ ! -f "$DISCORD_SCRIPT" ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Discord ÈÄöÁü•Ê¢ù‰ª∂‰∏çÊªøË∂≥ÔºåË∑≥ÈÅéÁôºÈÄÅ" >>"$LOG_FILE"; return
    fi

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Ê∫ñÂÇôÁôºÈÄÅ Discord ÈÄöÁü• (ÁãÄÊÖã: ${status:-"Default"})" >>"$LOG_FILE"
    
    local file_to_send="$LOG_FILE"
    local title="Backup ${SOURCE_DIR} Result..."
    if [ "$status" = "OK" ]; then title="‚úÖ Backup Successful: ${SRC_BASENAME}"; elif [ "$status" = "ERR" ]; then title="‚ùå Backup Failed: ${SRC_BASENAME}"; fi

    if [ "$SUMMARIZE" = true ] && [ -f "$AI_SCRIPT" ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ÂïüÁî® AI ÊëòË¶ÅÂäüËÉΩ" >>"$LOG_FILE"
        local filtered_log="${LOG_FILE}.filtered"; local summary_file="${LOG_FILE}.summary"
        grep -v "$GREP_EXCLUDE_PATTERN" "$LOG_FILE" > "$filtered_log"
        bash "$AI_SCRIPT" LOG_FILE="$filtered_log" REMOTE_CONFIG_URL="$REMOTE_CONFIG_URL" > "$summary_file"
        if [ -s "$summary_file" ]; then
            file_to_send="$summary_file"
            if [ "$status" = "OK" ]; then title="‚úÖ AI Summary (Success): ${SRC_BASENAME}"; elif [ "$status" = "ERR" ]; then title="‚ùå AI Summary (Failure): ${SRC_BASENAME}"; else title="AI Summary for ${SRC_BASENAME}"; fi
        else
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Ë≠¶Âëä: AI ÊëòË¶ÅÁî¢ÁîüÂ§±ÊïóÊàñÁÇ∫Á©∫" >>"$LOG_FILE"; file_to_send="$filtered_log"; title="Filtered Log for ${SRC_BASENAME} (AI Summary Failed)"
        fi
    else
        if [ "$status" = "ERR" ]; then
            tail -n 50 "$LOG_FILE" > "${LOG_FILE}.truncated"
        else
            tail -c 1500 "$LOG_FILE" > "${LOG_FILE}.truncated"
        fi
        file_to_send="${LOG_FILE}.truncated"
    fi

    "$DISCORD_SCRIPT" "LOG_FILE=${file_to_send}" "WEBHOOK_URL=${DISCORD_WEBHOOK}" "TITLE=${title}" "MSGTYPE=${msg_type}"
    if [ $? -eq 0 ]; then echo "$(date '+%Y-%m-%d %H:%M:%S') - Discord ÈÄöÁü•ÁôºÈÄÅÊàêÂäü" >>"$LOG_FILE"; else echo "$(date '+%Y-%m-%d %H:%M:%S') - Discord ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó" >>"$LOG_FILE"; fi
    
    [ -f "${LOG_FILE}.filtered" ] && rm "${LOG_FILE}.filtered"
    [ -f "${LOG_FILE}.summary" ] && rm "${LOG_FILE}.summary"
    [ -f "${LOG_FILE}.truncated" ] && rm "${LOG_FILE}.truncated"
}

# „Äê‰øÆÊîπ„ÄëÂáΩÂºèÔºöËÖ≥Êú¨Ê∏ÖÁêÜ
cleanup() {
    local status="$1" # Êé•Êî∂ÁãÄÊÖã
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ËÖ≥Êú¨Âü∑Ë°åÂÆåÁï¢ (SOURCE: $SOURCE_DIR, DRY_RUN: $DRY_RUN, STATUS: $status)" >>"$LOG_FILE"
    send_discord_notification "$status" # Â∞áÁãÄÊÖãÂÇ≥Áµ¶ÈÄöÁü•ÂáΩÂºè
}

# --- ‰∏ªÁ®ãÂºèÈñãÂßã ---

acquire_lock
# „Äê‰øÆÊîπ„ÄëtrapÔºöÁï∂ËÖ≥Êú¨Ë¢´‰∏≠Êñ∑ÊôÇÔºåË¶ñÁÇ∫ÈåØË™§ÔºåÂëºÂè´ cleanup "ERR"
trap 'cleanup "ERR"; exit 1' INT TERM

# ... ÂèÉÊï∏Ê™¢Êü• ...
if [ -n "$EXCLUDE_FILE" ] && [ ! -f "$EXCLUDE_FILE" ]; then
    echo "Ë≠¶ÂëäÔºöÊéíÈô§Ê∏ÖÂñÆÊ™îÊ°à $EXCLUDE_FILE ‰∏çÂ≠òÂú®" >>"$LOG_FILE"; EXCLUDE_FILE=""
fi
declare -A EXCEPTION_MAP
if [ -n "$EXCEPTIONS_FILE" ] && [ -f "$EXCEPTIONS_FILE" ]; then
    while IFS='=' read -r src dest; do
        src=$(echo "$src" | sed 's/[[:space:]]*$//; s/\\\/*$//'); dest=$(echo "$dest" | sed 's/[[:space:]]*$//; s/\\\/*$//')
        if [ -n "$src" ] && [ -n "$dest" ]; then EXCEPTION_MAP["$src"]="$dest"; fi
    done < "$EXCEPTIONS_FILE"
fi
if [ -n "${EXCEPTION_MAP[$NORMALIZED_SOURCE_DIR]}" ]; then
    DEST_DIR="${EXCEPTION_MAP[$NORMALIZED_SOURCE_DIR]}/"
else
    DEST_DIR="${DEST_ROOT}/${SRC_BASENAME}/"
fi

echo "-----$DATE_TITLE-----" >>"$LOG_FILE"
echo "$(date '+%Y-%m-%d %H:%M:%S') - ÂÇô‰ªΩÈñãÂßã (PID: $$, SOURCE: $SOURCE_DIR, DRY_RUN: $DRY_RUN)" >>"$LOG_FILE"

# --- Rsync Âü∑Ë°å ---
RSYNC_CMD="rsync -ah --info=progress2 --stats --whole-file --delete"
[ "$DRY_RUN" = true ] && RSYNC_CMD="$RSYNC_CMD --dry-run"
RSYNC_CMD="$RSYNC_CMD --bwlimit=$BW_LIMIT"
[ -n "$EXCLUDE_FILE" ] && RSYNC_CMD="$RSYNC_CMD --exclude-from='$EXCLUDE_FILE'"
for pattern in "${EXCLUDE_PATTERNS[@]}"; do
    RSYNC_CMD="$RSYNC_CMD --exclude='$pattern'"
done
RSYNC_CMD="$RSYNC_CMD '$SOURCE_DIR' '$DEST_DIR'"

eval "$RSYNC_CMD" >>"$LOG_FILE" 2>&1
# „ÄêÊ†∏ÂøÉ‰øÆÊîπ„ÄëÁ´ãÂç≥ÊçïÁç≤ rsync ÁöÑÁµêÊùü‰ª£Á¢º
rsync_exit_code=$?

# „ÄêÊ†∏ÂøÉ‰øÆÊîπ„ÄëÊ†πÊìöÁµêÊùü‰ª£Á¢ºË®≠ÂÆöÁãÄÊÖã‰∏¶Ë®òÈåÑÊó•Ë™å
backup_status="ERR" # È†êË®≠ÁÇ∫Â§±Êïó
if [ $rsync_exit_code -eq 0 ]; then
    backup_status="OK"
    if [ "$DRY_RUN" = true ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Dry-run Ê®°Êì¨ÂÇô‰ªΩÊàêÂäüÂÆåÊàê (SOURCE: $SOURCE_DIR)" >>"$LOG_FILE"
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ÂÇô‰ªΩÊàêÂäüÂÆåÊàê (SOURCE: $SOURCE_DIR)" >>"$LOG_FILE"
    fi
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ÂÇô‰ªΩÂü∑Ë°åÊôÇÁôºÁîüÈåØË™§(Code: $rsync_exit_code) (SOURCE: $SOURCE_DIR, DRY_RUN: $DRY_RUN)" >>"$LOG_FILE"
fi

# --- Ê∏ÖÁêÜËàäÊó•Ë™å ---
find "$LOG_DIR" -type f -name "${SCRIPT_NAME}_${SRC_BASENAME}_*.log" -mtime +"$RETENTION_DAYS" -exec rm -rf {} \;

# „ÄêÊ†∏ÂøÉ‰øÆÊîπ„ÄëÂú®ËÖ≥Êú¨Ê≠£Â∏∏ÁµêÊùüÊôÇÔºåÂëºÂè´ cleanup ‰∏¶ÂÇ≥ÂÖ•ÊúÄÁµÇÁãÄÊÖã
cleanup "$backup_status"